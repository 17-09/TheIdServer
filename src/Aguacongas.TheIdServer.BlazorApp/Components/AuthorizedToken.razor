@using System.Text.RegularExpressions
<AuthorizeView Policy="Is4-Writer">
    <Authorized>
        <div class="btn-group">
            <InputText name="@Name" class="form-control" @bind-Value="_token.ValueString" />
            <button type="button" class="btn btn-primary dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <span class="sr-only">Toggle Dropdown</span>
            </button>
            <div class="dropdown-menu">
                @foreach (var kv in QuickValues)
                {
                    <button type="button" class="dropdown-item" @onclick="() => SetValue(kv.Value)">@kv.Key</button>
                }
            </div>
        </div>
        <div class="text-secondary">
            @_token.ValueString
        </div>
    </Authorized>
    <NotAuthorized>
        @GetDisplayString()
    </NotAuthorized>
</AuthorizeView>


@code {
    private const string DISPLAY_FORMAT = @"d\ hh\:mm\:ss";
    private static Regex _regex = new Regex(Models.Token.RegulatExpression, RegexOptions.Compiled);
    private Token _token;
    private bool _updatingValue;

    [Parameter]
    public int Value { get; set; }

    [Parameter]
    public EventCallback<int> ValueChanged { get; set; }

    [Parameter]
    public IDictionary<string, TimeSpan> QuickValues { get; set; }

    [Parameter]
    public string Name { get; set; }


    protected override void OnInitialized()
    {
        var timeSpan = TimeSpan.FromSeconds(Value);
        _token = new Token
        {
            ValueString = timeSpan.ToString(DISPLAY_FORMAT)
        };
        _token.PropertyChanged += (s, e) =>
        {
            if (_updatingValue)
            {
                return;
            }

            var match = _regex.Match(_token.ValueString);
            if (!match.Success)
            {
                return;
            }

            var groups = match.Groups;
            if (groups["DaysTime"].Success)
            {
                var segments = _token.ValueString.Split(' ');
                var newTimeSpan = TimeSpan.Parse($"{segments[0]}.{segments[1]}");
                SetValue(newTimeSpan);
                return;
            }
            else if (groups["Time"].Success)
            {
                var newTimeSpan = TimeSpan.Parse(_token.ValueString);
                SetValue(newTimeSpan);
                return;
            }
            else if (groups["MinutesSecondes"].Success)
            {
                var newTimeSpan = TimeSpan.Parse($"00:{_token.ValueString}");
                SetValue(newTimeSpan);
                return;
            }
            else if (groups["Days"].Success || groups["Hours"].Success || groups["Minutes"].Success)
            {
                SetValueFromTokenIntString();
                return;
            }
            else
            {
                if (!_token.ValueString.EndsWith("s"))
                {
                    _token.ValueString += "s";
                }
                SetValueFromTokenIntString();
            }
        };
        base.OnInitialized();
    }

    private void SetValueFromTokenIntString()
    {
        var newTimeSpan = TimeSpan.FromDays(int.Parse(_token.ValueString.Substring(0, _token.ValueString.Length - 1)));
        SetValue(newTimeSpan);
    }

    private void SetValue(TimeSpan time)
    {
        Value = (int)time.TotalSeconds;
        ValueChanged.InvokeAsync(Value);
        _updatingValue = true;
        _token.ValueString = time.ToString(DISPLAY_FORMAT);
        StateHasChanged();
        _updatingValue = false;
    }

    private string GetDisplayString()
    {
        return TimeSpan.FromSeconds(Value).ToString("");
    }
}
