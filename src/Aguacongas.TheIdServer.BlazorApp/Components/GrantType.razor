@using  Aguacongas.IdentityServer.Store
@using  System.Threading
@inherits AutoCompleteModel<Entity.ClientGrantType>

@if (IsReadOnly)
{
    <div class="input-group input-group-sm mb-3">
        <div class="form-control" disabled>@GetGrantTypeName()</div>
        <div class="input-group-append select" @onclick="() => DeleteClicked.InvokeAsync(null)">
            <span class="input-group-text oi oi-trash" />
        </div>
    </div>
}
else
{
    <div id="@Id" class="input-group input-group-sm mb-3" data-toggle="dropdown">
        <input type="text" class="form-control new-claim" placeholder="grant type" value="@SelectedValue"
               @oninput="OnInputChanged" @onfocus='() => OnInputChanged(new ChangeEventArgs { Value = "" })' />
        <div class="input-group-append">
            <span class="input-group-text oi oi-plus" />
        </div>
    </div>
    <div class="dropdown-menu m-0">
        @if (FilteredValues != null)
        {
            foreach (var value in FilteredValues)
            {
                <button class="dropdown-item m-0 p-0 pl-1 pr-1" type="button" @onclick="() => SetSelectedValue(value)">
                    <small>@GetGrantTypeName(value)</small>
                </button>
            }
        }
    </div>
}

@code {
    [Parameter]
    public Entity.Client Model { get; set; }

    protected override bool IsReadOnly => !string.IsNullOrEmpty(Entity.GrantType);

    protected override Task<IEnumerable<string>> GetFilteredValues(string value)
    {
        value = value ?? string.Empty;
        var grantTypes = GrantTypes.Instance;
        var allowedGrantType = Model.AllowedGrantTypes;
        var result = grantTypes.Where(kv => !allowedGrantType.Any(g => g.GrantType == kv.Key) &&
            !(allowedGrantType.Any(g => g.GrantType == "implicit") && 
                (kv.Key == "authorization_code" || kv.Key == "hybrid")) &&
            !(allowedGrantType.Any(g => g.GrantType == "authorization_code") &&
                (kv.Key == "hybrid" || kv.Key == "implicit")) &&
            !(allowedGrantType.Any(g => g.GrantType == "hybrid") && 
                (kv.Key == "authorization_code" || kv.Key == "implicit")) &&
            (kv.Value.Contains(value) || kv.Key.Contains(value)))
        .Select(kv => kv.Key);
        return Task.FromResult(result);
    }

    protected override void SetValue(string value)
    {
        Entity.GrantType = value;
    }

    private string GetGrantTypeName()
    {
        return GetGrantTypeName(Entity.GrantType);
    }

    private string GetGrantTypeName(string key)
    {
        return GrantTypes.GetGrantTypeName(key);
    }
}