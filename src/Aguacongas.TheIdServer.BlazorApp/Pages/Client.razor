@page "/client"
@page "/client/{id}"
@inherits EntityModel<Entity.Client>

@if (Model == null)
{
    <p class="col"><em>Loading...</em></p>
}
else
{
    <EditForm EditContext="EditContext" OnValidSubmit="HandleValidSubmit">
        <div class="row bg-light sticky-top">
            <div class="col">
                @if (IsNew)
                {
                    <AuthorizeText Name="name" Placeholder="api id" @bind-Value="@Model.Id" />
                }
                else
                {
                    <h3>@Id</h3>
                }
            </div>
            @if (!NonEditable)
            {
                <div>
                    <AuthorizeButton Type="submit" CssSubClass="btn-primary">
                        <span class="oi oi-data-transfer-download"></span>
                        Save
                    </AuthorizeButton>
                    @if (!IsNew)
                    {
                        <DeleteEntityButton EntityId="@Model.Id" DeleteConfirmed="DeleteEntity" />
                    }
                </div>
            }
            <div class="col">
                <Filter CssClass="mt-1" TermChanged="OnFilterChanged" />
            </div>
            <div class="w-100"></div>
            <div class="col">
                <ul class="list-inline">
                    <li class="list-inline-item">
                        <a href="@(NavigationManager.Uri)#secrets" @onclick='() => ScrollTo("secrets")' @onclick:preventDefault>secrets</a>
                    </li>
                    <li class="list-inline-item">
                        <a href="@(NavigationManager.Uri)#claims" @onclick='() => ScrollTo("claims")' @onclick:preventDefault>claims</a>
                    </li>
                    <li class="list-inline-item">
                        <a href="@(NavigationManager.Uri)#scopes" @onclick='() => ScrollTo("scopes")' @onclick:preventDefault>scopes</a>
                    </li>
                    <li class="list-inline-item">
                        <a href="@(NavigationManager.Uri)#properties" @onclick='() => ScrollTo("properties")' @onclick:preventDefault>properties</a>
                    </li>
                </ul>
            </div>
            <div class="w-100"></div>
            <DataAnnotationsValidator />
            <ValidationSummary class="col" />
        </div>
        <div class="entity-details">
            <div class="card mb-3">
                <div class="card-body">
                    <div class="form-group row">
                        <label class="col col-form-label">
                        </label>
                        <div class="col-lg-10 col-sm-12">
                            <AuthorizeCheckbox Name="enabled" Label="enabled" @bind-Value="@Model.Enabled" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col col-form-label" for="description">
                            description
                        </label>
                        <div class="col-lg-10 col-sm-12">
                            <AuthorizeTextArea Name="description" Placeholder="description" @bind-Value="@Model.Description" />
                        </div>
                    </div>
                </div>
            </div>
            <div id="grantTypes" class="card mb-3">
                <div class="card-header">
                    <div class="row">
                        <h5 class="col">Grant types</h5>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col">
                            <ul class="list-inline">
                                @foreach (var grantType in Model.AllowedGrantTypes)
                                {
                                    <li class="list-inline-item">
                                        <GrantType Entity="@grantType"
                                                   DeleteClicked="() => OnGrantTypeDeleted(grantType)"
                                                   ValueChanged="() => OnGrantTypeValueChanged(grantType)" />
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
            @if (Model.AllowedGrantTypes.Any(g => g.GrantType == "authorization_code" ||
                g.GrantType != "hybrid" ||
                g.GrantType != "implicit" ||
                g.GrantType != "urn:ietf:params:oauth:grant-type:device_code") ||
            !Model.AllowedGrantTypes.All(g => _grantTypes.Any(k => g.GrantType == k)))
            {
                <div id="consent" class="card mb-3">
                    <div class="card-header">
                        <div class="row">
                            <h5 class="col">Consent</h5>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="form-group row">
                            <label class="col col-form-label">
                            </label>
                            <div class="col-lg-10 col-sm-12">
                                <AuthorizeCheckbox Name="require-consent" Label="require consent" @bind-Value="@Model.RequireConsent" />
                            </div>
                        </div>
                        @if (Model.RequireConsent)
                        {
                            <div class="form-group row">
                                <label class="col col-form-label" for="clientName">
                                    display name
                                </label>
                                <div class="col-lg-10 col-sm-12">
                                    <AuthorizeText Name="clientName" Placeholder="client name" @bind-Value="@Model.ClientName" />
                                </div>
                            </div>
                            <div class="form-group row">
                                <label class="col col-form-label" for="logoUri">
                                    logo uri
                                </label>
                                <div class="col-lg-10 col-sm-12">
                                    <AuthorizeText Name="logoUri" Placeholder="logo uri" @bind-Value="@Model.LogoUri" />
                                </div>
                            </div>
                            <div class="form-group row">
                                <label class="col col-form-label" for="clientUri">
                                    client uri
                                </label>
                                <div class="col-lg-10 col-sm-12">
                                    <AuthorizeText Name="clientUri" Placeholder="client uri" @bind-Value="@Model.ClientUri" />
                                </div>
                            </div>
                            <div class="form-group row">
                                <label class="col col-form-label">
                                </label>
                                <div class="col-lg-10 col-sm-12">
                                    <AuthorizeCheckbox Name="remember-consent" Label="remenber consent" @bind-Value="@Model.AllowRememberConsent" />
                                </div>
                            </div>
                            @if (Model.AllowRememberConsent)
                            {
                                <div class="form-group row">
                                    <label class="col col-form-label" for="consent-lifetime">
                                        consent lifetime
                                    </label>
                                    <div class="col-lg-10 col-sm-12">
                                        <AuthorizedToken Name="consent-lifetime" QuickValues="_consentLifetimeQuickValues" @bind-Value="@Model.ConsentLifetime" />
                                        <div>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            }
            <div id="tokens" class="card mb-3">
                <div class="card-header">
                    <div class="row">
                        <h5 class="col">Tokens</h5>
                    </div>
                </div>
                <div class="card-body">
                    <div class="form-group row">
                        <label class="col col-form-label pt-0" for="access-token-type">
                            access token type
                        </label>
                        <div class="col-lg-8 col-sm-12">
                            <AuthorizeView Policy="Is4-Writer">
                                <Authorized Context="accessTokenType">
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="access-token-type"
                                               value="0"
                                               checked="@(Model.AccessTokenType == (int)Models.AccessTokenType.Jwt)"
                                               @onchange="@(() => Model.AccessTokenType = (int)Models.AccessTokenType.Jwt)" />
                                        <label class="form-check-label" for="jwt">JWT</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="access-token-type"
                                               value="1"
                                               checked="@(Model.AccessTokenType == (int)Models.AccessTokenType.Reference)"
                                               @onchange="@(() => Model.AccessTokenType = (int)Models.AccessTokenType.Reference)" />
                                        <label class="form-check-label" for="reference">Reference</label>
                                    </div>
                                </Authorized>
                                <NotAuthorized Context="accessTokenType">
                                    @(((Models.AccessTokenType)Model.AccessTokenType).ToString())
                                </NotAuthorized>
                            </AuthorizeView>
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col col-form-label" for="access-token">
                            access token lifetime
                        </label>
                        <div class="col-lg-8 col-sm-12">
                            <AuthorizedToken Name="access-token" QuickValues="_accessTokenQuickValues" @bind-Value="@Model.AccessTokenLifetime" />
                            <div>
                                <AuthorizeCheckbox Name="include-jwt-id" Label="Include Jwt Id" @bind-Value="@Model.IncludeJwtId" />
                            </div>
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col col-form-label" for="id-token">
                            id token lifetime
                        </label>
                        <div class="col-lg-8 col-sm-12">
                            <AuthorizedToken Name="id-token" QuickValues="_idTokenQuickValues" @bind-Value="@Model.IdentityTokenLifetime" />
                            <div>
                                <AuthorizeCheckbox Name="include-claims" Label="always include user claims in Id token" @bind-Value="@Model.AlwaysIncludeUserClaimsInIdToken" />
                            </div>
                        </div>
                    </div>
                    @if (Model.AllowedGrantTypes.Any(g => g.GrantType == "hybrid") || !Model.AllowedGrantTypes.All(g => _grantTypes.Any(k => g.GrantType == k)))
                    {
                        <div class="form-group row">
                            <label class="col col-form-label">
                            </label>
                            <div class="col-lg-8 col-sm-12">
                                <AuthorizeCheckbox Name="allow-offline-access" Label="allow offline access" @bind-Value="@Model.AllowOfflineAccess" />
                            </div>
                        </div>
                        @if (Model.AllowOfflineAccess)
                        {
                            <div class="form-group row">
                                <label class="col col-form-label pt-0" for="refesh-token-usage">
                                    refresh token usage
                                </label>
                                <div class="col-lg-8 col-sm-12">
                                    <AuthorizeView Policy="Is4-Writer">
                                        <Authorized Context="refreshTokenUsage">
                                            <div class="form-check form-check-inline">
                                                <input class="form-check-input" type="radio" name="refresh-token-usage"
                                                       value="0"
                                                       checked="@(Model.RefreshTokenUsage == (int)Models.RefreshTokenUsage.ReUse)"
                                                       @onchange="@(() => Model.RefreshTokenUsage = (int)Models.RefreshTokenUsage.ReUse)" />
                                                <label class="form-check-label" for="jwt">Re use</label>
                                            </div>
                                            <div class="form-check form-check-inline">
                                                <input class="form-check-input" type="radio" name="refresh-token-usage"
                                                       value="1"
                                                       checked="@(Model.RefreshTokenUsage == (int)Models.RefreshTokenUsage.OneTimeOnly)"
                                                       @onchange="@(() => Model.RefreshTokenUsage = (int)Models.RefreshTokenUsage.OneTimeOnly)" />
                                                <label class="form-check-label" for="reference">One time only</label>
                                            </div>
                                        </Authorized>
                                        <NotAuthorized Context="refreshTokenUsage">
                                            @(((Models.RefreshTokenUsage)Model.RefreshTokenUsage).ToString())
                                        </NotAuthorized>
                                    </AuthorizeView>
                                </div>
                            </div>
                            <div class="form-group row">
                                <label class="col col-form-label pt-0" for="refesh-token-expiration">
                                    refresh token expiration
                                </label>
                                <div class="col-lg-8 col-sm-12">
                                    <AuthorizeView Policy="Is4-Writer">
                                        <Authorized Context="refreshTokenExpiration">
                                            <div class="form-check form-check-inline">
                                                <input class="form-check-input" type="radio" name="refresh-token-usage"
                                                       value="0"
                                                       checked="@(Model.RefreshTokenExpiration == (int)Models.RefreshTokenExpiration.Sliding)"
                                                       @onchange="@(() => Model.RefreshTokenExpiration = (int)Models.RefreshTokenExpiration.Sliding)" />
                                                <label class="form-check-label" for="jwt">Sliding</label>
                                            </div>
                                            <div class="form-check form-check-inline">
                                                <input class="form-check-input" type="radio" name="refresh-token-usage"
                                                       value="1"
                                                       checked="@(Model.RefreshTokenExpiration == (int)Models.RefreshTokenExpiration.Absolute)"
                                                       @onchange="@(() => Model.RefreshTokenExpiration = (int)Models.RefreshTokenExpiration.Absolute)" />
                                                <label class="form-check-label" for="reference">Absolute</label>
                                            </div>
                                        </Authorized>
                                        <NotAuthorized Context="refreshTokenUsage">
                                            @(((Models.RefreshTokenUsage)Model.RefreshTokenUsage).ToString())
                                        </NotAuthorized>
                                    </AuthorizeView>
                                </div>
                            </div>
                            @if (Model.RefreshTokenExpiration == (int)Models.RefreshTokenExpiration.Absolute)
                            {
                                <div class="form-group row">
                                    <label class="col col-form-label" for="refresh-token">
                                        absolute refresh token lifetime
                                    </label>
                                    <div class="col-lg-8 col-sm-12">
                                        <AuthorizedToken Name="refresh-token" QuickValues="_absoluteRefreshTokenQuickValues" @bind-Value="@Model.AbsoluteRefreshTokenLifetime" />
                                        <div>
                                            <AuthorizeCheckbox Name="update-access-token" Label="update access token on refresh" @bind-Value="@Model.UpdateAccessTokenClaimsOnRefresh" />
                                        </div>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="form-group row">
                                    <label class="col col-form-label" for="refresh-token">
                                        sliding refresh token lifetime
                                    </label>
                                    <div class="col-lg-8 col-sm-12">
                                        <AuthorizedToken Name="refresh-token" QuickValues="_slidingRefreshTokenQuickValues" @bind-Value="@Model.SlidingRefreshTokenLifetime" />
                                        <div>
                                            <AuthorizeCheckbox Name="update-access-token" Label="update access token on refresh" @bind-Value="@Model.UpdateAccessTokenClaimsOnRefresh" />
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    }
                    <div class="form-group row">
                        <label class="col col-form-label" for="sso-lifetime">
                            sso lifetime
                        </label>
                        <div class="col-lg-8 col-sm-12">
                            <AuthorizedToken Name="sso-lifetime" QuickValues="_ssoLifetimeQuickValues" @bind-Value="@Model.UserSsoLifetime" />
                        </div>
                    </div>
                    @if (Model.AllowedGrantTypes.Any(g => g.GrantType == "urn:ietf:params:oauth:grant-type:device_code"))
                    {
                        <div class="form-group row">
                            <label class="col col-form-label" for="device-flow-lifetime">
                                device flow request lifetime
                            </label>
                            <div class="col-lg-8 col-sm-12">
                                <AuthorizedToken Name="device-flow-lifetime" QuickValues="_deviceCodeLifetimeQuickValues" @bind-Value="@Model.DeviceCodeLifetime" />
                            </div>
                        </div>
                    }
                </div>
            </div>
            <div id="secrets" class="card mb-3">
                <div class="card-header">
                    <EntitySubGridTitle Text="Secrets"
                                        AddClicked="OnAddSecretClicked" />
                </div>
                <div class="card-body">
                    <EntitiesGrid Items="@Model.ClientSecrets" TableClass="table table-hover" Context="secret">
                        <TableHeader>
                            <th scope="col">
                                <SortableHeader Property="Type"
                                                Text="type"
                                                GridState="_secretGridState" />
                            </th>
                            <th scope="col">
                                <SortableHeader Property="Value"
                                                Text="value"
                                                GridState="_secretGridState" />
                            </th>
                            <th scope="col">
                                <SortableHeader Property="Description"
                                                Text="description"
                                                GridState="_secretGridState" />
                            </th>
                            <th scope="col">
                                <SortableHeader Property="Expiration"
                                                Text="expiration"
                                                GridState="_secretGridState" />
                            </th>
                            <th></th>
                        </TableHeader>
                        <RowTemplate>
                            @if (secret.Id != null)
                                {
                                <td>
                                    <div class="col-form-label">
                                        @secret.Type
                                    </div>
                                </td>
                                <td>
                                    <input type="password" readonly class="form-control-plaintext" value="@secret.Value" />
                                </td>
                                }
                                else
                                {
                                <td>
                                    <AuthorizeDropDownButton CssSubClass="btn-secondary" SelectedValue="@secret.Type" Values="@GetSecretTypes()" />
                                </td>
                                <td>
                                    <AuthorizeText Placeholder="value" @bind-Value="@secret.Value" />
                                </td>
                                }
                            <td>
                                <AuthorizeText Placeholder="description" @bind-Value="@secret.Description" />
                            </td>
                            <td>
                                <AuthorizeDate @bind-Value="@secret.Expiration" />
                            </td>
                            <td>
                                <AuthorizeButton CssSubClass="btn-primary" Clicked="() => OnDeleteSecretClicked(secret)">
                                    <span class="oi oi-trash"></span>
                                </AuthorizeButton>
                            </td>
                        </RowTemplate>
                    </EntitiesGrid>
                </div>
            </div>
            <div id="claims" class="card mb-3">
                <div class="card-header">
                    <EntitySubGridTitle Text="Claims"
                                        AddClicked="OnAddClaimClicked" />
                </div>
                <div class="card-body">
                    <EntitiesGrid Items="@Model.ClientClaims" TableClass="table table-hover" Context="claim">
                        <TableHeader>
                            <th scope="col">
                                <SortableHeader Property="Type"
                                                Text="type"
                                                GridState="_claimsGridState" />
                            </th>
                            <th scope="col">
                                <SortableHeader Property="Value"
                                                Text="value"
                                                GridState="_claimsGridState" />
                            </th>
                            <th></th>
                        </TableHeader>
                        <RowTemplate>
                            @if (claim.Id != null)
                                {
                                <td>
                                    @claim.Type
                                </td>
                                }
                                else
                                {
                                <td>
                                    <AuthorizeText Name="key" @bind-Value="@claim.Type" />
                                </td>
                                }
                            <td>
                                <AuthorizeText Name="value" @bind-Value="@claim.Value" />
                            </td>
                            <td>
                                <AuthorizeButton CssSubClass="btn-primary" Clicked="() => OnDeleteClaimClicked(claim)">
                                    <span class="oi oi-trash"></span>
                                </AuthorizeButton>
                            </td>
                        </RowTemplate>
                    </EntitiesGrid>
                </div>
            </div>
            <div id="properties" class="card mb-3">
                <div class="card-header">
                    <EntitySubGridTitle Text="Properties"
                                        AddClicked="OnAddPropertyClicked" />
                </div>
                <div class="card-body">
                    <EntitiesGrid Items="@Model.Properties" TableClass="table table-hover" Context="property">
                        <TableHeader>
                            <th scope="col">
                                <SortableHeader Property="Key"
                                                Text="key"
                                                GridState="_propertiesGridState" />
                            </th>
                            <th scope="col">
                                <SortableHeader Property="Value"
                                                Text="value"
                                                GridState="_propertiesGridState" />
                            </th>
                            <th></th>
                        </TableHeader>
                        <RowTemplate>
                            @if (property.Id != null)
                                {
                                <td>
                                    @property.Key
                                </td>
                                }
                                else
                                {
                                <td>
                                    <AuthorizeText Name="key" @bind-Value="@property.Key" />
                                </td>
                                }
                            <td>
                                <AuthorizeText Name="value" @bind-Value="@property.Value" />
                            </td>
                            <td>
                                <AuthorizeButton CssSubClass="btn-primary" Clicked="() => OnDeletePropertyClicked(property)">
                                    <span class="oi oi-trash"></span>
                                </AuthorizeButton>
                            </td>
                        </RowTemplate>
                    </EntitiesGrid>
                </div>
            </div>
        </div>
    </EditForm>
}
@code {
    private GridState _secretGridState = new GridState();
    private GridState _claimsGridState = new GridState();
    private GridState _propertiesGridState = new GridState();
    private List<string> _grantTypes = new List<string>
    {
        "authorization_code",
        "client_credentials",
        "hybrid",
        "implicit",
        "password",
        "urn:ietf:params:oauth:grant-type:device_code"
    };
    private Dictionary<string, TimeSpan?> _accessTokenQuickValues = new Dictionary<string, TimeSpan?>
    {
        ["15:00"] = TimeSpan.FromMinutes(15),
        ["30:00"] = TimeSpan.FromMinutes(30),
        ["1:00:00"] = TimeSpan.FromHours(1),
        ["5:00:00"] = TimeSpan.FromHours(5)
    };
    private Dictionary<string, TimeSpan?> _idTokenQuickValues = new Dictionary<string, TimeSpan?>
    {
        ["05:00"] = TimeSpan.FromMinutes(5),
        ["10:00"] = TimeSpan.FromMinutes(10)
    };
    private Dictionary<string, TimeSpan?> _absoluteRefreshTokenQuickValues = new Dictionary<string, TimeSpan?>
    {
        ["1.00:00:00"] = TimeSpan.FromDays(1),
        ["15.00:00:00"] = TimeSpan.FromDays(15),
        ["30.00:00:00"] = TimeSpan.FromDays(30)
    };
    private Dictionary<string, TimeSpan?> _slidingRefreshTokenQuickValues = new Dictionary<string, TimeSpan?>
    {
        ["15:00"] = TimeSpan.FromMinutes(15),
        ["30:00"] = TimeSpan.FromMinutes(30),
        ["1:00:00"] = TimeSpan.FromHours(1),
        ["5:00:00"] = TimeSpan.FromHours(5)
    };
    private Dictionary<string, TimeSpan?> _consentLifetimeQuickValues = new Dictionary<string, TimeSpan?>
    {
        ["15.00:00:00"] = TimeSpan.FromDays(15),
        ["30.00:00:00"] = TimeSpan.FromDays(30),
        ["365.00:00:00"] = TimeSpan.FromDays(365),
        ["Never expire"] = null
    };
    private Dictionary<string, TimeSpan?> _ssoLifetimeQuickValues = new Dictionary<string, TimeSpan?>
    {
        ["1:00:00"] = TimeSpan.FromDays(15),
        ["5:00:00"] = TimeSpan.FromDays(30),
        ["1.00:00:00"] = TimeSpan.FromDays(365),
        ["Session lifetime"] = null
    };
    private Dictionary<string, TimeSpan?> _deviceCodeLifetimeQuickValues = new Dictionary<string, TimeSpan?>
    {
        ["05:00"] = TimeSpan.FromMinutes(5),
        ["10:00"] = TimeSpan.FromMinutes(10)
    };

    protected override string Expand => "IdentityProviderRestrictions,ClientClaims,ClientSecrets,AllowedGrantTypes,RedirectUris,AllowedScopes,Properties";

    protected override bool NonEditable => false;

    protected override string BackUrl => "clients";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        AddEmpyEntities();
    }

    protected override Entity.Client Create()
    {
        return new Entity.Client
        {
            AllowedGrantTypes = new List<Entity.ClientGrantType>(),
            AllowedScopes = new List<Entity.ClientScope>(),
            ClientClaims = new List<Entity.ClientClaim>(),
            ClientSecrets = new List<Entity.ClientSecret>(),
            IdentityProviderRestrictions = new List<Entity.ClientIdPRestriction>(),
            RedirectUris = new List<Entity.ClientUri>()

        };
    }

    protected override void SanetizeEntityToSaved<TEntity>(TEntity entity)
    {
        if (entity is Entity.Client client)
        {
            client.IdentityProviderRestrictions = null;
            client.ClientClaims = null;
            client.ClientSecrets = null;
            client.AllowedGrantTypes = null;
            client.RedirectUris = null;
            client.AllowedScopes = null;
            client.Properties = null;
        }
    }

    protected override void SetNavigationProperty<TEntity>(TEntity entity)
    {
        if (entity is Entity.IClientSubEntity subEntity)
        {
            subEntity.ClientId = Model.Id;
        }
    }

    private void AddEmpyEntities()
    {
        Model.AllowedGrantTypes.Add(new Entity.ClientGrantType());
        Model.AllowedScopes.Add(new Entity.ClientScope());
    }

    private void OnFilterChanged(string term)
    {
        Model.AllowedScopes = State.AllowedScopes
        .Where(s => s.Scope.Contains(term))
        .ToList();
        Model.AllowedGrantTypes = State.AllowedGrantTypes.
            Where(g => g.GrantType.Contains(term))
            .ToList();
        Model.ClientClaims = State.ClientClaims
        .Where(c => c.Type.Contains(term) || c.Value.Contains(term))
        .ToList();
        Model.ClientSecrets = State.ClientSecrets
        .Where(s => s.Description.Contains(term) || s.Type.Contains(term))
        .ToList();
        Model.IdentityProviderRestrictions = State.IdentityProviderRestrictions
            .Where(i => i.Provider.Contains(term))
            .ToList();
        Model.RedirectUris = State.RedirectUris
            .Where(u => u.Uri.Contains(term))
            .ToList();
    }

    private void OnAddSecretClicked()
    {
        var secret = new Entity.ClientSecret
        {
            Type = "SharedSecret"
        };
        Model.ClientSecrets.Add(secret);
        EntityCreated(secret);
        StateHasChanged();
    }

    private void OnDeleteSecretClicked(Entity.ClientSecret secret)
    {
        Model.ClientSecrets.Remove(secret);
        EntityDeleted(secret);
        StateHasChanged();
    }

    private void OnAddClaimClicked()
    {
        var claim = new Entity.ClientClaim();
        Model.ClientClaims.Add(claim);
        EntityCreated(claim);
        StateHasChanged();
    }

    private void OnDeleteClaimClicked(Entity.ClientClaim claim)
    {
        Model.ClientClaims.Remove(claim);
        EntityDeleted(claim);
        StateHasChanged();
    }

    private void OnGrantTypeValueChanged(Entity.ClientGrantType grantType)
    {
        EntityCreated(grantType);
        Model.AllowedGrantTypes.Add(new Entity.ClientGrantType());
        StateHasChanged();
    }

    private void OnGrantTypeDeleted(Entity.ClientGrantType grantType)
    {
        Model.AllowedGrantTypes.Remove(grantType);
        EntityDeleted(grantType);
        StateHasChanged();
    }

    private void OnAddPropertyClicked()
    {
        var property = new Entity.ClientProperty();
        Model.Properties.Add(property);
        EntityCreated(property);
        StateHasChanged();
    }

    private void OnDeletePropertyClicked(Entity.ClientProperty property)
    {
        Model.Properties.Remove(property);
        EntityDeleted(property);
        StateHasChanged();
    }
}