@using Aguacongas.TheIdServer.BlazorApp.Components.ClientComponents

@page "/client"
@page "/client/{id}"
@inherits EntityModel<Entity.Client>

@if (Model == null)
{
    <p class="col"><em>Loading...</em></p>
}
else
{
    <EditForm EditContext="EditContext" OnValidSubmit="HandleValidSubmit">
        <div class="row bg-light sticky-top">
            <div class="col">
                @if (IsNew)
                {
                    <AuthorizeText Name="name" Placeholder="api id" @bind-Value="@Model.Id" />
                }
                else
                {
                    <h3>@Id</h3>
                }
            </div>
            @if (!NonEditable)
            {
                <div>
                    <AuthorizeButton Type="submit" CssSubClass="btn-primary">
                        <span class="oi oi-data-transfer-download"></span>
                        Save
                    </AuthorizeButton>
                    @if (!IsNew)
                    {
                        <DeleteEntityButton EntityId="@Model.Id" DeleteConfirmed="DeleteEntity" />
                    }
                </div>
            }
            <div class="col">
                <Filter CssClass="mt-1" TermChanged="OnFilterChanged" />
            </div>
            <div class="w-100"></div>
            <div class="col">
                <ul class="list-inline">
                    <li class="list-inline-item">
                        <a href="@(NavigationManager.Uri)#secrets" @onclick='() => ScrollTo("secrets")' @onclick:preventDefault>secrets</a>
                    </li>
                    <li class="list-inline-item">
                        <a href="@(NavigationManager.Uri)#claims" @onclick='() => ScrollTo("claims")' @onclick:preventDefault>claims</a>
                    </li>
                    <li class="list-inline-item">
                        <a href="@(NavigationManager.Uri)#scopes" @onclick='() => ScrollTo("scopes")' @onclick:preventDefault>scopes</a>
                    </li>
                    <li class="list-inline-item">
                        <a href="@(NavigationManager.Uri)#properties" @onclick='() => ScrollTo("properties")' @onclick:preventDefault>properties</a>
                    </li>
                </ul>
            </div>
            <div class="w-100"></div>
            <DataAnnotationsValidator />
            <ValidationSummary class="col" />
        </div>
        <div class="entity-details">
            <div class="card mb-3">
                <div class="card-body">
                    <div class="form-group row">
                        <label class="col col-form-label">
                        </label>
                        <div class="col-lg-10 col-sm-12">
                            <AuthorizeCheckbox Name="enabled" Label="enabled" @bind-Value="@Model.Enabled" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col col-form-label" for="description">
                            description
                        </label>
                        <div class="col-lg-10 col-sm-12">
                            <AuthorizeTextArea Name="description" Placeholder="description" @bind-Value="@Model.Description" />
                        </div>
                    </div>
                </div>
            </div>
            <div id="grantTypes" class="card mb-3">
                <div class="card-header">
                    <div class="row">
                        <h5 class="col">Grant types</h5>
                    </div>
                </div>
                <div class="card-body">
                    <ClientGrantTypes Model="@Model" GrantTypeDeletedClicked="OnGrantTypeDeleted" GrantTypeValueChanged="OnGrantTypeValueChanged" />
                </div>
            </div>
            @if (Model.IsWebClient())
            {
                <div id="consent" class="card mb-3">
                    <div class="card-header">
                        <div class="row">
                            <h5 class="col">Consent</h5>
                        </div>
                    </div>
                    <div class="card-body">
                        <ClientConsents Model="@Model" />
                    </div>
                </div>
                <div id="urls" class="card mb-3">
                    <div class="card-header">
                        <EntitySubGridTitle Text="URls"
                                            AddClicked="OnAddUrlClicked" />
                    </div>
                    <div class="card-body">
                        <ClientUris Model="@Model" DeleteEntityClicked="OnDeleteUrlClicked" />
                    </div>
                </div>
            }
            <div id="scopes" class="card mb-3">
                <div class="card-header">
                    <div class="row">
                        <h5 class="col">Scopes</h5>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col">
                            <ul class="list-inline">
                                @foreach (var scope in Model.AllowedScopes)
                                {
                                    <li class="list-inline-item">
                                        <ClientScope Entity="@scope"
                                                     Model="@Model"
                                                   DeleteClicked="() => OnScopeDeleted(scope)"
                                                   ValueChanged="() => OnScopeValueChanged(scope)" />
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <AuthorizeCheckbox Name="allow-offline-access" Label="allow offline access" @bind-Value="@Model.AllowOfflineAccess" />
                        </div>
                    </div>
                </div>
            </div>
            <div id="tokens" class="card mb-3">
                <div class="card-header">
                    <div class="row">
                        <h5 class="col">Tokens</h5>
                    </div>
                </div>
                <div class="card-body">
                    <ClientTokens Model="@Model" />
                </div>
            </div>
            <div id="secrets" class="card mb-3">
                <div class="card-header">
                    <EntitySubGridTitle Text="Secrets"
                                        AddClicked="OnAddSecretClicked" />
                </div>
                <div class="card-body">
                    <ClientSecrets Model="@Model" DeleteEntityClicked="OnDeleteSecretClicked" />
                </div>
            </div>
            <div id="claims" class="card mb-3">
                <div class="card-header">
                    <EntitySubGridTitle Text="Claims"
                                        AddClicked="OnAddClaimClicked" />
                </div>
                <div class="card-body">
                    <ClientClaims Model="@Model" DeleteEntityClicked="OnDeleteClaimClicked" />
                </div>
            </div>
            <div id="properties" class="card mb-3">
                <div class="card-header">
                    <EntitySubGridTitle Text="Properties"
                                        AddClicked="OnAddPropertyClicked" />
                </div>
                <div class="card-body">
                    <ClientProperties Model="@Model" DeleteEntityClicked="OnDeletePropertyClicked" />
                </div>
            </div>
        </div>
    </EditForm>
}
@code {
    protected override string Expand => "IdentityProviderRestrictions,ClientClaims,ClientSecrets,AllowedGrantTypes,RedirectUris,AllowedScopes,Properties";

    protected override bool NonEditable => false;

    protected override string BackUrl => "clients";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        AddEmpyEntities();
    }

    protected override Entity.Client Create()
    {
        return new Entity.Client
        {
            AllowedGrantTypes = new List<Entity.ClientGrantType>(),
            AllowedScopes = new List<Entity.ClientScope>(),
            ClientClaims = new List<Entity.ClientClaim>(),
            ClientSecrets = new List<Entity.ClientSecret>(),
            IdentityProviderRestrictions = new List<Entity.ClientIdPRestriction>(),
            RedirectUris = new List<Entity.ClientUri>()

        };
    }

    protected override void SanetizeEntityToSaved<TEntity>(TEntity entity)
    {
        if (entity is Entity.Client client)
        {
            client.IdentityProviderRestrictions = null;
            client.ClientClaims = null;
            client.ClientSecrets = null;
            client.AllowedGrantTypes = null;
            client.RedirectUris = null;
            client.AllowedScopes = null;
            client.Properties = null;
        }
    }

    protected override void SetNavigationProperty<TEntity>(TEntity entity)
    {
        if (entity is Entity.IClientSubEntity subEntity)
        {
            subEntity.ClientId = Model.Id;
        }
    }

    protected override Type GetEntityType(FieldIdentifier identifier)
    {
        if (identifier.Model is ClientUri)
        {
            return typeof(Entity.ClientUri);
        }
        return base.GetEntityType(identifier);
    }

    protected override Entity.IEntityId GetEntityModel(FieldIdentifier identifier)
    {
        if (identifier.Model is ClientUri clientUri)
        {
            return clientUri.Parent;
        }
        return base.GetEntityModel(identifier);
    }

    private void AddEmpyEntities()
    {
        Model.AllowedGrantTypes.Add(new Entity.ClientGrantType());
        Model.AllowedScopes.Add(new Entity.ClientScope());
    }

    private void OnFilterChanged(string term)
    {
        Model.AllowedScopes = State.AllowedScopes
        .Where(s => s.Scope.Contains(term))
        .ToList();
        Model.AllowedGrantTypes = State.AllowedGrantTypes.
            Where(g => g.GrantType.Contains(term))
            .ToList();
        Model.ClientClaims = State.ClientClaims
        .Where(c => c.Type.Contains(term) || c.Value.Contains(term))
        .ToList();
        Model.ClientSecrets = State.ClientSecrets
        .Where(s => s.Description.Contains(term) || s.Type.Contains(term))
        .ToList();
        Model.IdentityProviderRestrictions = State.IdentityProviderRestrictions
            .Where(i => i.Provider.Contains(term))
            .ToList();
        Model.RedirectUris = State.RedirectUris
            .Where(u => u.Uri.Contains(term))
            .ToList();
    }

    private void OnAddUrlClicked()
    {
        var url = new Entity.ClientUri();
        Model.RedirectUris.Add(url);
        EntityCreated(url);
        StateHasChanged();
    }

    private void OnDeleteUrlClicked(Entity.ClientUri url)
    {
        Model.RedirectUris.Remove(url);
        EntityDeleted(url);
        StateHasChanged();
    }

    private void OnAddSecretClicked()
    {
        var secret = new Entity.ClientSecret
        {
            Type = "SharedSecret"
        };
        Model.ClientSecrets.Add(secret);
        EntityCreated(secret);
        StateHasChanged();
    }

    private void OnDeleteSecretClicked(Entity.ClientSecret secret)
    {
        Model.ClientSecrets.Remove(secret);
        EntityDeleted(secret);
        StateHasChanged();
    }

    private void OnAddClaimClicked()
    {
        var claim = new Entity.ClientClaim();
        Model.ClientClaims.Add(claim);
        EntityCreated(claim);
        StateHasChanged();
    }

    private void OnDeleteClaimClicked(Entity.ClientClaim claim)
    {
        Model.ClientClaims.Remove(claim);
        EntityDeleted(claim);
        StateHasChanged();
    }

    private void OnGrantTypeValueChanged(Entity.ClientGrantType grantType)
    {
        EntityCreated(grantType);
        Model.AllowedGrantTypes.Add(new Entity.ClientGrantType());
        StateHasChanged();
    }

    private void OnGrantTypeDeleted(Entity.ClientGrantType grantType)
    {
        Model.AllowedGrantTypes.Remove(grantType);
        EntityDeleted(grantType);
        StateHasChanged();
    }

    private void OnScopeValueChanged(Entity.ClientScope scope)
    {
        EntityCreated(scope);
        Model.AllowedScopes.Add(new Entity.ClientScope());
        StateHasChanged();
    }

    private void OnScopeDeleted(Entity.ClientScope scope)
    {
        Model.AllowedScopes.Remove(scope);
        EntityDeleted(scope);
        StateHasChanged();
    }

    private void OnAddPropertyClicked()
    {
        var property = new Entity.ClientProperty();
        Model.Properties.Add(property);
        EntityCreated(property);
        StateHasChanged();
    }

    private void OnDeletePropertyClicked(Entity.ClientProperty property)
    {
        Model.Properties.Remove(property);
        EntityDeleted(property);
        StateHasChanged();
    }
}