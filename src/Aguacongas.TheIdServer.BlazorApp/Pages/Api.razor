@using  Aguacongas.TheIdServer.BlazorApp.Components.ApiComponents

@page "/protectresource"
@page "/protectresource/{id}"
@inherits EntityModel<Entity.ProtectResource>

@if (Model == null)
{
    <p class="col"><em>Loading...</em></p>
}
else
{
    <EditForm EditContext="EditContext" OnValidSubmit="HandleValidSubmit">
        <div class="row bg-light sticky-top">
            <div class="col">
                @if (IsNew)
                {
                    <AuthorizeText Name="name" Placeholder="api id" @bind-Value="@Model.Id" />
                }
                else
                {
                    <h3>@Id</h3>
                }
            </div>
            @if (!NonEditable)
            {
                <div>
                    <AuthorizeButton Type="submit" CssSubClass="btn-primary">
                        <span class="oi oi-data-transfer-download"></span>
                        Save
                    </AuthorizeButton>
                    @if (!IsNew)
                    {
                        <DeleteEntityButton EntityId="@Model.Id" DeleteConfirmed="DeleteEntity" />
                    }
                </div>
            }
            <div class="col">
                <Filter CssClass="mt-1" TermChanged="OnFilterChanged" />
            </div>
            <div class="w-100"></div>
            <div class="col">
                <ul class="list-inline">
                    <li class="list-inline-item">
                        <a href="@(NavigationManager.Uri)#secrets" @onclick='() => ScrollTo("secrets")' @onclick:preventDefault>secrets</a>
                    </li>
                    <li class="list-inline-item">
                        <a href="@(NavigationManager.Uri)#claims" @onclick='() => ScrollTo("claims")' @onclick:preventDefault>claims</a>
                    </li>
                    <li class="list-inline-item">
                        <a href="@(NavigationManager.Uri)#scopes" @onclick='() => ScrollTo("scopes")' @onclick:preventDefault>scopes</a>
                    </li>
                    <li class="list-inline-item">
                        <a href="@(NavigationManager.Uri)#properties" @onclick='() => ScrollTo("properties")' @onclick:preventDefault>properties</a>
                    </li>
                </ul>
            </div>
            <div class="w-100"></div>
            <DataAnnotationsValidator />
            <ValidationSummary class="col" />
        </div>
        <div class="entity-details">
            <div class="card mb-3">
                <div class="card-body">
                    <div class="form-group row">
                        <label class="col col-form-label">
                        </label>
                        <div class="col-lg-10 col-sm-12">
                            <AuthorizeCheckbox Name="enabled" Label="enabled" @bind-Value="@Model.Enabled" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col col-form-label" for="displayName">
                            display name
                        </label>
                        <div class="col-lg-10 col-sm-12">
                            <AuthorizeText Name="displayName" Placeholder="display name" @bind-Value="@Model.DisplayName" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col col-form-label" for="description">
                            description
                        </label>
                        <div class="col-lg-10 col-sm-12">
                            <AuthorizeTextArea Name="description" Placeholder="decription" @bind-Value="@Model.Description" />
                        </div>
                    </div>
                </div>
            </div>
            <div id="secrets" class="card mb-3">
                <div class="card-header">
                    <EntitySubGridTitle Text="Secrets"
                                        AddClicked="OnAddSecretClicked" />
                </div>
                <div class="card-body">
                    <ApiSecrets Model="@Model" DeleteEntityClicked="OnDeleteSecretClicked" />
                </div>
            </div>
            <div id="claims" class="card mb-3">
                <div class="card-header">
                    <div class="row">
                        <h5 class="col">Claims</h5>
                    </div>
                </div>
                <div class="card-body">
                    <ApiClaimTypes Model="@Model" ClaimValueChanged="OnClaimTypeValueChanged" DeleteClaimClicked="OnClaimTypeDeleted" />
                </div>
            </div>
            <div id="scopes" class="card mb-3">
                <div class="card-header">
                    <EntitySubGridTitle Text="Scopes"
                                        AddClicked="OnAddScopeClicked" />
                </div>
                <div class="card-body">
                    <div class="row">
                        @foreach(var scope in Model.Scopes)
                        {
                            <div class="col-12">
                                <ApiScope Model="@Model" Scope="@scope" 
                                          DeleteScopeClaimClicked="claim => OnScopeClaimDeleted(scope, claim)"
                                          ScopeClaimValueChanged="claim => OnScopeClaimValueChanged(scope, claim)"
                                          DeleteScopeClicked="OnDeleteScopeClicked"/>
                            </div>
                        }
                    </div>
                </div>
            </div>
            <div id="properties" class="card mb-3">
                <div class="card-header">
                    <EntitySubGridTitle Text="Properties"
                                        AddClicked="OnAddPropertyClicked" />
                </div>
                <div class="card-body">
                    <ApiProperties Model="@Model" DeleteEntityClicked="OnDeletePropertyClicked" />
                </div>
            </div>
        </div>
    </EditForm>
}
@code {
    protected override string Expand => "Secrets,Scopes,Scopes/ApiScopeClaims,ApiClaims,Properties";

    protected override bool NonEditable => Model.NonEditable;

    protected override string BackUrl => "apis";

    public override int Compare(Type x, Type y)
    {
        if (x == typeof(Entity.ApiScopeClaim))
        {
            return 1;
        }
        if (y == typeof(Entity.ApiScopeClaim))
        {
            return -1;
        }
        return base.Compare(x, y);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        AddEmpyClaimsTypes();
    }

    protected override Entity.ProtectResource Create()
    {
        var claims = new List<Entity.ApiClaim>();
        var scope = new Entity.ApiScope
        {
            ApiScopeClaims = new List<Entity.ApiScopeClaim>()
        };
        EntityCreated(scope);
        return new Entity.ProtectResource
        {
            Secrets = new List<Entity.ApiSecret>(),
            Scopes = new List<Entity.ApiScope>()
            {
                scope
            },
            ApiClaims = new List<Entity.ApiClaim>(),
            Properties = new List<Entity.ApiProperty>()
        };
    }

    protected override void SetNavigationProperty<TEntity>(TEntity entity)
    {
        if (entity is Entity.IApiSubEntity subEntity)
        {
            subEntity.ApiId = Model.Id;
        }
        if (entity is Entity.ApiScopeClaim apiScopeClaim)
        {
            if (apiScopeClaim.ApiScpope == null)
            {
                throw new InvalidOperationException("ApiScopeClaim.ApiScope property cannot be null.");
            }
            if (apiScopeClaim.ApiScpope.Id == null)
            {
                throw new InvalidOperationException("ApiScopeClaim.ApiScope.Id property cannot be null.");
            }
            apiScopeClaim.ApiScpopeId = apiScopeClaim.ApiScpope.Id;
            apiScopeClaim.ApiScpope = null;
        }
    }

    protected override void SanetizeEntityToSaved<TEntity>(TEntity entity)
    {
        if (entity is Entity.ProtectResource api)
        {
            api.ApiClaims = null;
            api.Properties = null;
            api.Scopes = null;
            api.Secrets = null;
        }
        if (entity is Entity.ApiScope scope)
        {
            scope.ApiScopeClaims = null;
        }
        if (entity is Entity.ApiSecret secret && secret.Id == null)
        {
            secret.Value = secret.Value.Sha256();
        }
    }

    protected override void SetModelEntityId(Type entityType, Entity.IEntityId result)
    {
        if (entityType == typeof(Entity.ApiScope))
        {
            var scope = result as Entity.ApiScope;
            var modelScope = Model.Scopes.SingleOrDefault(s => s.Id == null && s.Scope == scope.Scope);
            if (modelScope != null)
            {
                modelScope.Id = result.Id;
            }
        }
    }

    private void AddEmpyClaimsTypes()
    {
        Model.ApiClaims.Add(new Entity.ApiClaim());
        foreach (var scope in Model.Scopes)
        {
            scope.ApiScopeClaims.Add(new Entity.ApiScopeClaim());
        }
    }

    private void OnFilterChanged(string term)
    {
        Model.ApiClaims = State.ApiClaims
            .Where(c => c.Type != null && c.Type.Contains(term))
            .ToList();
        Model.Secrets = State.Secrets
            .Where(s => (s.Description != null && s.Description.Contains(term)) || (s.Type != null && s.Type.Contains(term)))
            .ToList();
        Model.Scopes = State.Scopes
            .Where(s => (s.Description != null && s.Description.Contains(term)) ||
                (s.DisplayName != null && s.DisplayName.Contains(term)) ||
                (s.Scope != null && s.Scope.Contains(term)))
            .ToList();
        foreach (var scope in Model.Scopes)
        {
            var stateScope = State.Scopes.FirstOrDefault(s => s.Scope == scope.Scope);
            if (stateScope != null)
            {
                scope.ApiScopeClaims = stateScope.ApiScopeClaims
                    .Where(c => (c.Type != null && c.Type.Contains(term)))
                    .ToList();
            }
        }
        Model.Properties = State.Properties
            .Where(p => (p.Key != null && p.Key.Contains(term)) || (p.Value != null && p.Value.Contains(term)))
            .ToList();

        AddEmpyClaimsTypes();
    }

    private void OnAddSecretClicked()
    {
        var secret = new Entity.ApiSecret
        {
            Type = "SharedSecret"
        };
        Model.Secrets.Add(secret);
        EntityCreated(secret);
        StateHasChanged();
    }

    private void OnDeleteSecretClicked(Entity.ApiSecret secret)
    {
        Model.Secrets.Remove(secret);
        EntityDeleted(secret);
        StateHasChanged();
    }

    private void OnClaimTypeValueChanged(Entity.ApiClaim claim)
    {
        EntityCreated(claim);
        Model.ApiClaims.Add(new Entity.ApiClaim());
        StateHasChanged();
    }

    private void OnClaimTypeDeleted(Entity.ApiClaim claim)
    {
        Model.ApiClaims.Remove(claim);
        EntityDeleted(claim);
        StateHasChanged();
    }

    private void OnAddScopeClicked()
    {
        var claims = new List<Entity.ApiScopeClaim>();
        claims.Add(new Entity.ApiScopeClaim());
        var scope = new Entity.ApiScope
        {
            ApiScopeClaims = claims
        };
        Model.Scopes.Add(scope);
        EntityCreated(scope);
        StateHasChanged();
    }

    private void OnDeleteScopeClicked(Entity.ApiScope scope)
    {
        Model.Scopes.Remove(scope);
        EntityDeleted(scope);
        StateHasChanged();
    }

    private void OnScopeClaimDeleted(Entity.ApiScope scope, Entity.ApiScopeClaim claim)
    {
        scope.ApiScopeClaims.Remove(claim);
        EntityDeleted(claim);
        StateHasChanged();
    }

    private void OnScopeClaimValueChanged(Entity.ApiScope scope, Entity.ApiScopeClaim claim)
    {
        claim.ApiScpope = scope;
        EntityCreated(claim);
        scope.ApiScopeClaims.Add(new Entity.ApiScopeClaim());
        StateHasChanged();
    }

    private void OnAddPropertyClicked()
    {
        var property = new Entity.ApiProperty();
        Model.Properties.Add(property);
        EntityCreated(property);
        StateHasChanged();
    }

    private void OnDeletePropertyClicked(Entity.ApiProperty property)
    {
        Model.Properties.Remove(property);
        EntityDeleted(property);
        StateHasChanged();
    }
}
