@page "/protectresource"
@page "/protectresource/{id}"
@inherits EntityModel<Entity.ProtectResource>

@if (Model == null)
{
    <p class="col"><em>Loading...</em></p>
}
else
{
<EditForm Model="@Model" OnValidSubmit="@HandleValidSubmit">
    <div class="row sticky-top">
        <div class="col">
            @if (IsNew)
            {
                <InputText id="name" class="form-control" placeholder="api id" @bind-Value="@Model.Id" />
            }
            else
            {
                <h3>@Id</h3>
            }
        </div>
    </div>

    <div class="entity-details">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group row">
            <label class="col-2 col-form-label" for="enabled">
                enabled
            </label>
            <div class="col-sm-10">
                <InputCheckbox id="enabled" @bind-Value="@Model.Enabled" />
            </div>
        </div>
        <div class="form-group row">
            <label class="col-2 col-form-label" for="displayName">
                display name
            </label>
            <div class="col-sm-10">
                <InputText id="displayName" class="form-control" placeholder="display name" @bind-Value="@Model.DisplayName" />
            </div>
        </div>
        <div class="form-group row">
            <label class="col-2 col-form-label" for="description">
                description
            </label>
            <div class="col-sm-10">
                <InputTextArea id="description" class="form-control" placeholder="decription" @bind-Value="@Model.DisplayName" />
            </div>
        </div>
        <EntitySubListHeader Text="Secrets" FilterChanged="OnSecretFilterChanged">
        </EntitySubListHeader>
        <EntitiesGrid Items="@Model.Secrets" TableClass="table table-hover" Context="secret">
            <TableHeader>
                <th scope="col">
                    <SortableHeader Property="Type"
                                    Text="type"
                                    GridState="_secretGridState" />
                </th>
                <th scope="col">
                    <SortableHeader Property="Value"
                                    Text="expiration"
                                    GridState="_secretGridState" />
                </th>
                <th scope="col">
                    <SortableHeader Property="Description"
                                    Text="description"
                                    GridState="_secretGridState" />
                </th>
                <th scope="col">
                    <SortableHeader Property="Expiration"
                                    Text="expiration"
                                    GridState="_secretGridState" />
                </th>
            </TableHeader>
            <RowTemplate>
                <td>@secret.Type</td>
                <td>
                    @if (secret.Id != null)
                        {
                        <input type="password" readonly class="form-control-plaintext" value="@secret.Value" />
                        }
                        else
                        {
                        <InputText @bind-Value="@secret.Value" />
                        }
                </td>
                <td>
                    @if (secret.Id != null)
                        {
                        @secret.Description
                        }
                        else
                        {
                        <InputText @bind-Value="@secret.Description" />
                        }
                </td>
                <td>
                    @if (secret.Id != null)
                        {
                        @secret.Expiration
                        }
                        else
                        {
                        <InputDate @bind-Value="@secret.Expiration" />
                        }
                </td>
            </RowTemplate>
        </EntitiesGrid>
    </div>
</EditForm>
}
@code {
    private GridState _secretGridState = new GridState();
    protected override string Expand => "Secrets,Scopes,ApiClaims,ApiScopeClaims,Properties";

    protected override Entity.ProtectResource Create()
    {
        return new Entity.ProtectResource
        {
            Secrets = new List<Entity.ApiSecret>(),
            Scopes = new List<Entity.ApiScope>(),
            ApiClaims = new List<Entity.ApiClaim>(),
            ApiScopeClaims = new List<Entity.ApiScopeClaim>(),
            Properties = new List<Entity.ApiProperty>()
        };
    }

    private void OnSecretFilterChanged(string term)
    {
        Model.Secrets = State.Secrets
            .Where(s => s.Type.Contains(term) || s.Description.Contains(term))
            .ToList();
    }
}
